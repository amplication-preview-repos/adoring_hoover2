/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PayrollMonthService } from "../payrollMonth.service";
import { PayrollMonthCreateInput } from "./PayrollMonthCreateInput";
import { PayrollMonth } from "./PayrollMonth";
import { PayrollMonthFindManyArgs } from "./PayrollMonthFindManyArgs";
import { PayrollMonthWhereUniqueInput } from "./PayrollMonthWhereUniqueInput";
import { PayrollMonthUpdateInput } from "./PayrollMonthUpdateInput";

export class PayrollMonthControllerBase {
  constructor(protected readonly service: PayrollMonthService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PayrollMonth })
  async createPayrollMonth(
    @common.Body() data: PayrollMonthCreateInput
  ): Promise<PayrollMonth> {
    return await this.service.createPayrollMonth({
      data: data,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        month: true,
        startDate: true,
        updatedAt: true,
        year: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PayrollMonth] })
  @ApiNestedQuery(PayrollMonthFindManyArgs)
  async payrollMonths(@common.Req() request: Request): Promise<PayrollMonth[]> {
    const args = plainToClass(PayrollMonthFindManyArgs, request.query);
    return this.service.payrollMonths({
      ...args,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        month: true,
        startDate: true,
        updatedAt: true,
        year: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PayrollMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async payrollMonth(
    @common.Param() params: PayrollMonthWhereUniqueInput
  ): Promise<PayrollMonth | null> {
    const result = await this.service.payrollMonth({
      where: params,
      select: {
        createdAt: true,
        endDate: true,
        id: true,
        month: true,
        startDate: true,
        updatedAt: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PayrollMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePayrollMonth(
    @common.Param() params: PayrollMonthWhereUniqueInput,
    @common.Body() data: PayrollMonthUpdateInput
  ): Promise<PayrollMonth | null> {
    try {
      return await this.service.updatePayrollMonth({
        where: params,
        data: data,
        select: {
          createdAt: true,
          endDate: true,
          id: true,
          month: true,
          startDate: true,
          updatedAt: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PayrollMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePayrollMonth(
    @common.Param() params: PayrollMonthWhereUniqueInput
  ): Promise<PayrollMonth | null> {
    try {
      return await this.service.deletePayrollMonth({
        where: params,
        select: {
          createdAt: true,
          endDate: true,
          id: true,
          month: true,
          startDate: true,
          updatedAt: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
