/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PayrollMonth } from "./PayrollMonth";
import { PayrollMonthCountArgs } from "./PayrollMonthCountArgs";
import { PayrollMonthFindManyArgs } from "./PayrollMonthFindManyArgs";
import { PayrollMonthFindUniqueArgs } from "./PayrollMonthFindUniqueArgs";
import { CreatePayrollMonthArgs } from "./CreatePayrollMonthArgs";
import { UpdatePayrollMonthArgs } from "./UpdatePayrollMonthArgs";
import { DeletePayrollMonthArgs } from "./DeletePayrollMonthArgs";
import { PayrollMonthService } from "../payrollMonth.service";
@graphql.Resolver(() => PayrollMonth)
export class PayrollMonthResolverBase {
  constructor(protected readonly service: PayrollMonthService) {}

  async _payrollMonthsMeta(
    @graphql.Args() args: PayrollMonthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PayrollMonth])
  async payrollMonths(
    @graphql.Args() args: PayrollMonthFindManyArgs
  ): Promise<PayrollMonth[]> {
    return this.service.payrollMonths(args);
  }

  @graphql.Query(() => PayrollMonth, { nullable: true })
  async payrollMonth(
    @graphql.Args() args: PayrollMonthFindUniqueArgs
  ): Promise<PayrollMonth | null> {
    const result = await this.service.payrollMonth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PayrollMonth)
  async createPayrollMonth(
    @graphql.Args() args: CreatePayrollMonthArgs
  ): Promise<PayrollMonth> {
    return await this.service.createPayrollMonth({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PayrollMonth)
  async updatePayrollMonth(
    @graphql.Args() args: UpdatePayrollMonthArgs
  ): Promise<PayrollMonth | null> {
    try {
      return await this.service.updatePayrollMonth({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PayrollMonth)
  async deletePayrollMonth(
    @graphql.Args() args: DeletePayrollMonthArgs
  ): Promise<PayrollMonth | null> {
    try {
      return await this.service.deletePayrollMonth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
